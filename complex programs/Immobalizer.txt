// PIC18F458 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1H
#pragma config OSC = HS         // Oscillator Selection bits (HS oscillator)
#pragma config OSCS = ON        // Oscillator System Clock Switch Enable bit (Oscillator system clock switch option is enabled (oscillator switching is enabled))

// CONFIG2L
#pragma config PWRT = OFF       // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOR = OFF        // Brown-out Reset Enable bit (Brown-out Reset disabled)
#pragma config BORV = 25        // Brown-out Reset Voltage bits (VBOR set to 2.5V)

// CONFIG2H
#pragma config WDT = OFF        // Watchdog Timer Enable bit (WDT disabled (control is placed on the SWDTEN bit))
#pragma config WDTPS = 128      // Watchdog Timer Postscale Select bits (1:128)

// CONFIG4L
#pragma config STVR = OFF       // Stack Full/Underflow Reset Enable bit (Stack Full/Underflow will not cause Reset)
#pragma config LVP = OFF        // Low-Voltage ICSP Enable bit (Low-Voltage ICSP disabled)

// CONFIG5L
#pragma config CP0 = OFF        // Code Protection bit (Block 0 (000200-001FFFh) not code protected)
#pragma config CP1 = OFF        // Code Protection bit (Block 1 (002000-003FFFh) not code protected)
#pragma config CP2 = OFF        // Code Protection bit (Block 2 (004000-005FFFh) not code protected)
#pragma config CP3 = OFF        // Code Protection bit (Block 3 (006000-007FFFh) not code protected)

// CONFIG5H
#pragma config CPB = OFF        // Boot Block Code Protection bit (Boot Block (000000-0001FFh) not code protected)
#pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM not code protected)

// CONFIG6L
#pragma config WRT0 = OFF       // Write Protection bit (Block 0 (000200-001FFFh) not write protected)
#pragma config WRT1 = OFF       // Write Protection bit (Block 1 (002000-003FFFh) not write protected)
#pragma config WRT2 = OFF       // Write Protection bit (Block 2 (004000-005FFFh) not write protected)
#pragma config WRT3 = OFF       // Write Protection bit (Block 3 (006000-007FFFh) not write protected)

// CONFIG6H
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) not write protected)
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot Block (000000-0001FFh) not write protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write protected)

// CONFIG7L
#pragma config EBTR0 = OFF      // Table Read Protection bit (Block 0 (000200-001FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR1 = OFF      // Table Read Protection bit (Block 1 (002000-003FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR2 = OFF      // Table Read Protection bit (Block 2 (004000-005FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR3 = OFF      // Table Read Protection bit (Block 3 (006000-007FFFh) not protected from Table Reads executed in other blocks)

// CONFIG7H
#pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot Block (000000-0001FFh) not protected from Table Reads executed in other blocks)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#include <stdio.h>
#define __XTAL_FREQ 20000000 //setting frequency
#define ENABLE 1;
#define DISABLE 2;
int led_stat;
enum modes{CONFG_MODE=0x80,NORMAL_MODE=0x08};//convert the configaration mode to normal mode
void System_init();
void CAN_init();
void mask_flter();
void set_baudrate();
void CAN_write(int);
void acc_filter();
void CAN_read();
void LED();
int frame[100];
int main(){
    System_init();//system init call function
    CAN_init(); //CAN init call function
    set_baudrate();//set baudrate call function
    mask_flter();//mask_filter call function
    acc_filter(); //acc_filter call function
    while(1){
        if((frame[8]==0xAA) && (frame[9]==0xAA) && (frame[10]==0xAA) && (frame[11]==0xAA)){
      //check the condition weather the given values right or not
            PORTBbits.RB1=1; //enable the bit as input
            led_stat=1; //the condition for led will glow
            CAN_write(led_stat);//read the status of led
        }
        else{
            PORTBbits.RB1=0;
            led_stat=0; //the condition fails led goes to off
            CAN_write(led_stat);
        }
        __delay_ms(2000);
    }
}
    void  System_init(){
        GIE=ENABLE; //enable the global interrupts
        PEIE=ENABLE;//enable the pheripheral interrupt
}
    void CAN_init(){
        TRISBbits.RB0=0;
        TRISBbits.RB1=0;
        TRISBbits.RB2=0;//transmitting in MCU
        TRISBbits.RB3=1;
        PORTBbits.RB0=0;
        PORTBbits.RB1=0;
        RXB0IP=1;
        RXB0IE=1;
    }
    void set_baudrate(){
    CANCON=0x80;
    while(CANSTAT = 0x80);
    BRGCON1 = 0XC1; //Synchronization jump width time=4xTQ //000001=TQ=(2x2)/FOSC
    BRGCON2 =0xAE;//1=Freely programmable //101=phase segment 1 time =6xTQ//110 =Propagation time =7xTQ
    BRGCON3=0X45;
    CIOCON =0X20;
    CANCON=NORMAL_MODE;
    }
    void CAN_write(int led_stat){
        CANCON = NORMAL_MODE;
        while(CANCON !=0x08);
        TXB0SIDH = 0x00;
        TXB0SIDL=0x08;
        TXB0EIDH=0x09;
        TXB0EIDL=0x08;
        TXB0DLC=0x08;
        TXB0D0=0x00;
        TXB0D1=0x00;
        TXB0D2=0x00;
        TXB0D3=led_stat;
        TXB0D4=0xFF;
        TXB0D5=0xFF;
        TXB0D6=0xFF;
        TXB0D7=0xFF;
        TXB0CON=0x08;
    } 
    void mask_filter(){
        RXM0SIDH=0x00;
        RXM0SIDL=0x00;
    }
    void acc_filter(){
        RXF0SIDH=0x00;
        RXF0SIDL=0x00;
    }
    __interrupt()ISR1(){
        if(RXB0IF==1){
            RXB0IF=0;
            CAN_read();
        }
    }
    void CAN_read(){
        CANCON =0x0E;
        frame[0]=RXB0SIDH;
        frame[1]=RXB0SIDL;
        frame[2]=RXB0EIDH;
        frame[3]=RXB0EIDL;
        frame[4]=RXB0DLC;
        frame[5]=RXB0D0;
        frame[6]=RXB0D1;
        frame[7]=RXB0D2;
        frame[8]=RXB0D3;
        frame[9]=RXB0D4;
        frame[10]=RXB0D5;
        frame[11]=RXB0D6;
        frame[12]=RXB0D7;
        RXB0FUL=0;
        LED();
    }
   
