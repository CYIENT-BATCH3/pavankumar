
// PIC18F458 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1H
#pragma config OSC = HS         // Oscillator Selection bits (HS oscillator)
#pragma config OSCS = OFF       // Oscillator System Clock Switch Enable bit (Oscillator system clock switch option is disabled (main oscillator is source))

// CONFIG2L
#pragma config PWRT = OFF       // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOR = ON         // Brown-out Reset Enable bit (Brown-out Reset enabled)
#pragma config BORV = 25        // Brown-out Reset Voltage bits (VBOR set to 2.5V)

// CONFIG2H
#pragma config WDT = ON         // Watchdog Timer Enable bit (WDT enabled)
#pragma config WDTPS = 128      // Watchdog Timer Postscale Select bits (1:128)

// CONFIG4L
#pragma config STVR = ON        // Stack Full/Underflow Reset Enable bit (Stack Full/Underflow will cause Reset)
#pragma config LVP = ON         // Low-Voltage ICSP Enable bit (Low-Voltage ICSP enabled)

// CONFIG5L
#pragma config CP0 = OFF        // Code Protection bit (Block 0 (000200-001FFFh) not code protected)
#pragma config CP1 = OFF        // Code Protection bit (Block 1 (002000-003FFFh) not code protected)
#pragma config CP2 = OFF        // Code Protection bit (Block 2 (004000-005FFFh) not code protected)
#pragma config CP3 = OFF        // Code Protection bit (Block 3 (006000-007FFFh) not code protected)

// CONFIG5H
#pragma config CPB = OFF        // Boot Block Code Protection bit (Boot Block (000000-0001FFh) not code protected)
#pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM not code protected)

// CONFIG6L
#pragma config WRT0 = OFF       // Write Protection bit (Block 0 (000200-001FFFh) not write protected)
#pragma config WRT1 = OFF       // Write Protection bit (Block 1 (002000-003FFFh) not write protected)
#pragma config WRT2 = OFF       // Write Protection bit (Block 2 (004000-005FFFh) not write protected)
#pragma config WRT3 = OFF       // Write Protection bit (Block 3 (006000-007FFFh) not write protected)

// CONFIG6H
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) not write protected)
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot Block (000000-0001FFh) not write protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write protected)

// CONFIG7L
#pragma config EBTR0 = OFF      // Table Read Protection bit (Block 0 (000200-001FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR1 = OFF      // Table Read Protection bit (Block 1 (002000-003FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR2 = OFF      // Table Read Protection bit (Block 2 (004000-005FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR3 = OFF      // Table Read Protection bit (Block 3 (006000-007FFFh) not protected from Table Reads executed in other blocks)

// CONFIG7H
#pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot Block (000000-0001FFh) not protected from Table Reads executed in other blocks)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#include <stdio.h>
#define _XTAL_FREQ 20000000
#define ENABLE 1    //
#define DISABLE 0

enum modes{CONFIG_MODE = 0X80,NORMAL_MODE = 0X08};

//declare the different function for different operation

void System_init();   //System initialization 
void CAN_init(); //CAN initialization
void Set_baudrate(); //set baud rate initialization
void CAN_write(); //CAN write initialization 1
void CAN_write2(); // //CAN write initialization 2
int main(){
    System_init(); //declare the  System init() call function 
    CAN_init();    //declare the  CAN init() call function
    Set_baudrate(); //declare the  Set baud rate init() call function
    while(1){
    CAN_write();  //declare the  CAN write 1 init() call function
    __delay_ms(1000); //delay
    CAN_write2();  //declare the  CAN write 2 init() call function
    }
}
void System_init()
{
    GIE = ENABLE; //enables the global interrupts
    PEIE = ENABLE;  //enables the pheripheral interrupts
}
void  CAN_init()
{
    TRISBbits.RB3 = ENABLE; //enable PORTB of bit RB3 is high(ON)
    TRISBbits.RB2 = DISABLE; //enable PORTB of bit RB2 is high(OFF)
}
void Set_baudrate()
{
    CANCON = CONFIG_MODE; //check the mode of operation
    while(CANSTAT == CONFIG_MODE); //verify the mode of operation
    
    BRGCON1 = 0XC1; //Baud rate registers
    BRGCON2 = 0XAE;  //Baud rate registers
    BRGCON3 = 0X45;  //Baud rate registers
    CIOCON = 0X20;  //Baud rate registers
    CANCON = NORMAL_MODE;
}

void CAN_write()
{
     CANCON = NORMAL_MODE; //check the mode of operation
     while(!CANCON==0x08);   //verify the mode of operation
     TXB0SIDH = 0x00;     //stadard mode high             
     TXB0SIDL = 0x08;  //stadard mode  low
     TXB0EIDH = 0x0F;  //Extension mode high
     TXB0EIDL = 0x00; //Extension mode high
     TXB0DLC = 0X08;  //data legnth code is 8 bit data
     TXB0D0  = 0X00;
     TXB0D1  = 0XFF; //enables this pin high for data transmission
     TXB0D2  = 0X00;
     TXB0D3  = 0X00;
     TXB0D4  = 0XFF;  //enables this pin high for data transmission
     TXB0D5  = 0X00;
     TXB0D6  = 0X00;
     TXB0D7  = 0X00;
     TXB0CON = 0X08; //transmission control register
    // CANCON = NORMAL_MODE;
     
}
void CAN_write2()
{
     CANCON = NORMAL_MODE;//check the mode of operation
     while(!CANCON==0x08);//verify the mode of operation
     TXB0SIDH = 0x00;       //stadard mode high                
     TXB0SIDL = 0x08;    //stadard mode low
     TXB0EIDH = 0x00;  //Extension mode high
     TXB0EIDL = 0x0F; //Extension mode low
     TXB0DLC = 0X08; //data legnth code is 8 bit data
     TXB0D0  = 0X00;
     TXB0D1  = 0XFF;  //enables this pin high for data transmission
     TXB0D2  = 0X00;
     TXB0D3  = 0X00;
     TXB0D4  = 0XFF;  //enables this pin high for data transmission
     TXB0D5  = 0X00;
     TXB0D6  = 0X00;
     TXB0D7  = 0X00;
     TXB0CON = 0X08; //transmission control register
     CANCON = NORMAL_MODE;
     
}
